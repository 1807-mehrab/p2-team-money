CREATE TABLE MEMBER (MEMBER_ID INTEGER PRIMARY KEY, FIRST_NAME VARCHAR2(20), LAST_NAME VARCHAR2(20), EMAIL VARCHAR2(30), 
PASSWORD VARCHAR2(40));

CREATE TABLE ACCOUNT (ACCOUNT_ID INTEGER PRIMARY KEY, BALANCE NUMBER(15, 2), MEMBER_ID INTEGER);

CREATE TABLE COMPANY_STOCK (COMPANY_STOCK_ID INTEGER PRIMARY KEY, COMPANY_NAME VARCHAR2(30), STOCK_PRICE NUMBER(10, 2));

CREATE TABLE STOCK_SHARES (STOCK_SHARES_ID INTEGER PRIMARY KEY, SHARES INTEGER, ACCOUNT_ID INTEGER, COMPANY_STOCK_ID INTEGER);
COMMIT;
ALTER TABLE ACCOUNT ADD (
    CONSTRAINT FK_MEMBER_ID FOREIGN KEY (MEMBER_Id) REFERENCES MEMBER (MEMBER_Id));
    
ALTER TABLE STOCK_SHARES ADD (
    CONSTRAINT FK_ACCOUNT_ID FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNT (ACCOUNT_ID),
    CONSTRAINT FK_COMPANY_STOCK_ID FOREIGN KEY (COMPANY_STOCK_ID) REFERENCES COMPANY_STOCK (COMPANY_STOCK_ID)
);

-- Sequence
CREATE SEQUENCE SQ_MEMBER_PK START WITH 1 INCREMENT BY 1;

-- Trigger (before insert, use sequence)
CREATE OR REPLACE TRIGGER TR_INSERT_MEMBER
BEFORE INSERT ON MEMBER
FOR EACH ROW
BEGIN
    SELECT SQ_MEMBER_PK.NEXTVAL INTO :NEW.MEMBER_ID FROM DUAL;
END;
/

-- Sequence
CREATE SEQUENCE SQ_ACCOUNT_PK START WITH 1 INCREMENT BY 1;

-- Trigger (before insert, use sequence)
CREATE OR REPLACE TRIGGER TR_INSERT_ACCOUNT
BEFORE INSERT ON ACCOUNT
FOR EACH ROW
BEGIN
    SELECT SQ_ACCOUNT_PK.NEXTVAL INTO :NEW.ACCOUNT_ID FROM DUAL;
END;
/

-- Sequence
CREATE SEQUENCE SQ_COMPANY_STOCK_PK START WITH 1 INCREMENT BY 1;

-- Trigger (before insert, use sequence)
CREATE OR REPLACE TRIGGER TR_INSERT_COMPANY_STOCK
BEFORE INSERT ON COMPANY_STOCK
FOR EACH ROW
BEGIN
    SELECT SQ_COMPANY_STOCK_PK.NEXTVAL INTO :NEW.COMPANY_STOCK_ID FROM DUAL;
END;
/

-- Sequence
CREATE SEQUENCE SQ_STOCK_SHARES_PK START WITH 1 INCREMENT BY 1;

-- Trigger (before insert, use sequence)
CREATE OR REPLACE TRIGGER TR_INSERT_STOCK_SHARES
BEFORE INSERT ON STOCK_SHARES
FOR EACH ROW
BEGIN
    SELECT SQ_STOCK_SHARES_PK.NEXTVAL INTO :NEW.STOCK_SHARES_ID FROM DUAL;
END;
/
CREATE TABLE MEMBER (MEMBER_ID INTEGER PRIMARY KEY, FIRST_NAME VARCHAR2(20), LAST_NAME VARCHAR2(20), EMAIL VARCHAR2(30), 
PASSWORD VARCHAR2(40));

CREATE TABLE ACCOUNT (ACCOUNT_ID INTEGER PRIMARY KEY, BALANCE NUMBER(15, 2), MEMBER_ID INTEGER);

CREATE TABLE COMPANY (COMPANY_ID INTEGER PRIMARY KEY, COMPANY_NAME VARCHAR2(30));

CREATE TABLE TRANSACTION (TRANSACTION_ID INTEGER PRIMARY KEY, SHARES INTEGER, PURCHASE_PRICE NUMBER(15, 2), ACCOUNT_ID INTEGER, COMPANY_ID INTEGER);

COMMIT;

ALTER TABLE ACCOUNT ADD (
    CONSTRAINT FK_MEMBER_ID FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER (MEMBER_ID));
    
ALTER TABLE STOCK_SHARES ADD (
    CONSTRAINT FK_ACCOUNT_ID FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNT (ACCOUNT_ID),
    CONSTRAINT FK_COMPANY_ID FOREIGN KEY (COMPANY_ID) REFERENCES COMPANY (COMPANY_ID)
);

-- Sequence
CREATE SEQUENCE SQ_MEMBER_PK START WITH 1 INCREMENT BY 1;

-- Trigger (before insert, use sequence)
CREATE OR REPLACE TRIGGER TR_INSERT_MEMBER
BEFORE INSERT ON MEMBER
FOR EACH ROW
BEGIN
    SELECT SQ_MEMBER_PK.NEXTVAL INTO :NEW.MEMBER_ID FROM DUAL;
END;
/

-- Sequence
CREATE SEQUENCE SQ_ACCOUNT_PK START WITH 1 INCREMENT BY 1;

-- Trigger (before insert, use sequence)
CREATE OR REPLACE TRIGGER TR_INSERT_ACCOUNT
BEFORE INSERT ON ACCOUNT
FOR EACH ROW
BEGIN
    SELECT SQ_ACCOUNT_PK.NEXTVAL INTO :NEW.ACCOUNT_ID FROM DUAL;
END;
/

-- Sequence
CREATE SEQUENCE SQ_COMPANY_PK START WITH 1 INCREMENT BY 1;

-- Trigger (before insert, use sequence)
CREATE OR REPLACE TRIGGER TR_INSERT_COMPANY
BEFORE INSERT ON COMPANY
FOR EACH ROW
BEGIN
    SELECT SQ_COMPANY_PK.NEXTVAL INTO :NEW.COMPANY_ID FROM DUAL;
END;
/

-- Sequence
CREATE SEQUENCE SQ_TRANSACTION_PK START WITH 1 INCREMENT BY 1;

-- Trigger (before insert, use sequence)
CREATE OR REPLACE TRIGGER TR_INSERT_TRANSACTION
BEFORE INSERT ON TRANSACTION
FOR EACH ROW
BEGIN
    SELECT SQ_TRANSACTION_PK.NEXTVAL INTO :NEW.TRANSACTION_ID FROM DUAL;
END;
/